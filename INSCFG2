-- V3 Update Log:
-- Webhook logging (when executed, disconnect, breach)
-- ** have to use a raw pastebin for script same as whitelist
-- Services
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local UserInputService = game:GetService("UserInputService")
local HttpService = game:GetService("HttpService")
local Players = game:GetService("Players")

-- Variables
local pastebinURL = "https://pastebin.com/raw/MmBRYnBi"
local whitelist = {}
local scriptTemplate = [[
    loadstring(game:HttpGet(('https://raw.githubusercontent.com/Mythyxs/dotnet/main/INSCFG'),true))()
]]
local webhookUrl = "https://discord.com/api/webhooks/1271879184100098118/1eCMPuRih7TI0ZafqfBCdb3jjd7XJsETyrI1YTLVgm71gsM-JKaDvZwtKeAx3ejnpOd_"

-- Universe ID to Game Name mapping
local universeGameMapping = {
    [2459091562] = "RH2",
    [3517981996] = "Soccer Universe",
    [5594072486] = "RFL"
}

-- Function to get the current game name based on Universe ID
local function getGameName()
    local universeId = game.GameId
    return universeGameMapping[universeId] or "Universal"
end

-- Function to fetch whitelist
local function fetchWhitelist()
    local response
    if syn then
        response = syn.request({
            Url = pastebinURL,
            Method = "GET"
        })
    elseif request then
        response = request({
            Url = pastebinURL,
            Method = "GET"
        })
    elseif http_request then
        response = http_request({
            url = pastebinURL,
            method = "GET"
        })
    end
    if response and response.StatusCode == 200 then
        whitelist = HttpService:JSONDecode(response.Body)
    else
        warn("Failed to fetch whitelist")
    end
end

-- Function to send webhook message
local function sendWebhookMessage(player, message)
    -- Append game name only for specific messages
    if message:find("has executed") or message:find("Player Breach") then
        local gameName = getGameName()
        message = message .. " in " .. gameName
    end

    local jsonMessage = HttpService:JSONEncode({
        content = message
    })

    local response
    if syn then
        response = syn.request({
            Url = webhookUrl,
            Method = "POST",
            Headers = {
                ["Content-Type"] = "application/json"
            },
            Body = jsonMessage
        })
    elseif request then
        response = request({
            Url = webhookUrl,
            Method = "POST",
            Headers = {
                ["Content-Type"] = "application/json"
            },
            Body = jsonMessage
        })
    elseif http_request then
        response = http_request({
            url = webhookUrl,
            method = "POST",
            headers = {
                ["Content-Type"] = "application/json"
            },
            body = jsonMessage
        })
    end
end

-- Function to check if player is whitelisted
local function isWhitelisted(player)
    for _, whitelistedPlayer in pairs(whitelist) do
        if whitelistedPlayer == player.Name then
            return true
        end
    end
    return false
end

-- Function to kick player if not whitelisted
local function kickPlayer(player)
    player:Kick("your not whitelisted")
    sendWebhookMessage(player, "Player Breach: " .. player.Name)
end

-- Function to run script if player is whitelisted
local function runScript(player)
    loadstring(scriptTemplate)()
    sendWebhookMessage(player, player.Name .. " has executed")
    local startTime = tick()
    player.AncestryChanged:Connect(function()
        local endTime = tick()
        local totalTime = endTime - startTime
        local minutes = math.floor(totalTime / 60)
        local seconds = math.floor(totalTime % 60)
        local timeString = minutes .. ":" .. string.format("%02d", seconds)
        sendWebhookMessage(player, player.Name .. " has disconnected. Total Time: " .. timeString)
    end)
end

-- Main logic
fetchWhitelist()
if isWhitelisted(Players.LocalPlayer) then
    runScript(Players.LocalPlayer)
else
    kickPlayer(Players.LocalPlayer)
end

-- Check for whitelist updates every 5 seconds
while wait(5) do
    fetchWhitelist()
    if not isWhitelisted(Players.LocalPlayer) then
        kickPlayer(Players.LocalPlayer)
    end
end
