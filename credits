import requests
import asyncio
import discord
from multiprocessing import Process

# Dictionary to store bot details
bots = [
    { # Shem AI
        'token': 'MTI3MjE4ODU2NDI1OTYwMjUyNQ.G_q7Te.axCiR7dDJN2iHTw0M32tS1ypKkGSHipd2H50Es',
        'application_id': '1272188564259602525',
        'bio': 'test1'
    },
    { # CBA AI
        'token': 'MTI3MjIxOTkwNjY2NjAwNDUzMA.GueBBo.OBBDH1qLp3vk9ZiMIVSW7ocA_VHhLF6mB5lgoI',
        'application_id': '1272219906666004530',
        'bio': 'test2'
    },
    { # Lua AI
        'token': 'MTI3MjM2MjMxNjgzODYwMDgwNg.GAbm08.X2sVjFXKp6uZEbKY-a7KSVzXgdsrIqGp3unIxE',
        'application_id': '1272362316838600806',
        'bio': 'test3'
    }
]

def get_headers(token):
    return {
        'Authorization': f'Bot {token}',
        'Content-Type': 'application/json'
    }

async def update_description(token, application_id, description):
    api_url = f'https://discord.com/api/v10/applications/{application_id}'
    headers = get_headers(token)
    payload = {
        'description': description
    }
    response = requests.patch(api_url, headers=headers, json=payload)
    if response.status_code == 200:
        print(f"Description updated to '{description}' for bot with token {token}")
    else:
        print(f"Failed to update description for bot with token {token}. Status code: {response.status_code}, Response: {response.text}")

async def bot_worker(token, application_id, bio):
    intents = discord.Intents.default()
    client = discord.Client(intents=intents)

    @client.event
    async def on_ready():
        print(f'Logged in as {client.user.name}')
        while True:
            try:
                await update_description(token, application_id, bio)
            except Exception as e:
                print(f"An error occurred: {e}")
            await asyncio.sleep(15)

    await client.start(token)

def run_bot(token, application_id, bio):
    loop = asyncio.new_event_loop()
    asyncio.set_event_loop(loop)
    loop.run_until_complete(bot_worker(token, application_id, bio))

if __name__ == '__main__':
    processes = []
    for bot in bots:
        p = Process(target=run_bot, args=(bot['token'], bot['application_id'], bot['bio']))
        p.start()
        processes.append(p)

    for p in processes:
        p.join()
